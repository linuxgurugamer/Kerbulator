Language reference
==================

### Functions
The basic building blocks of Kerbulator are functions. 
A function is a calculation that produces some result when executed. Often, it operates on some input variables you specify when executing the function.

An example of a function would be as follows:

    in: a "Length of one side of a triangle"
    in: b "Length of the other side"
    out: c "Length of the third side"
    c = sqrt(a^2 + b^2)

The function above takes two input variables: `a` and `b` and gives a short description of what they should be. The function procuces one output variable `c`, which is calculated by the Pythagorean theorem `c = sqrt(a^2 + b^2)`.

A function contains:
 1. A list of input specifications (can be empty)
 2. A list of output specifications (can be empty)
 3. A list of statements to execute (at least one)

### Input and output specifications
An input specification is one of the following forms:
 1. `in: identifier`
 2. `in: identifier "Short description"`, in which case `<Short description>` will be shown in the function help in the GUI. 

An output specification is of the following forms:
 1. `out: identifier`
 2. `out: identifier "Short description"`, in which case `<Short description>` will be shown in the function help in the GUI.
 3. `out: "prefix" identifier`, in which case the GUI will show the output of this variable as `<prefix>output`.
 4. `out: "prefix" identifier "postfix"`, in which case the GUI will show the output of this variable as `<prefix>output<postfix>`.
 5. `out: identifier "postfix" "Short description"`, in which case the GUI will show the output of this variable as `output<postfix>` and will show `<Short description>` in the function help.
 6. `out: "prefix" identifier "postfix" "Short description"`, in which case the GUI will show the output of this variable as `<prefix>output<postfix>` and will show `<Short description>` in the function help.

If no output specifications are given, the result produced by the execution of the last statement of the function is used as output of the function.

Outputs can also take the form of `alarm:` and `maneuver:` which can be used to create maneuver nodes and alarms. This will be expanded on in the sections "Creating maneuver nodes" and "Setting alarms".

### Comments
A `#` character is ignored and everything following the character up to the end of the line is also ignored. You can use this to place comments in your code. For example:

    # This line will be ignored
    a = 1 + 1 # <-- a very simple sum

### Statements
A statement is a mathematical formula. It assigns the result of some calculation to one or more variables. It is of the form `identifier = expression`. For example:

    c = sqrt(a^2 + b^2)

When the expression yields a list, the elements of the list can be assigned to separate variables and the statement is of the form `identifier, identifier, ..., identifier = expression`. The number of identifier on the left and of the = sign must be equal to the number of elements in the list yielded by the expression. For example:

    a, b = [1, 2]

A statement can span multiple lines by using the `\` symbol:

    A = [[1,2,3], \
         [4,5,6]]

#### Identifiers
An identifier is used to denote a variable or function name. It can be any unicode string that does not contain spaces, the comment mark `#`, an operator `+ - / ÷ * × · ^ √ % ! ¬ < > ≤ ≥`, colon `:`, equals sign `=`, or bracket `( ) [ ] { } ⌊ ⌋ ⌈ ⌉ |`. Identifiers can contain numbers and dots (.), but not as first character. Examples of valid identifiers:

    a
    aaaa
    some_value
    someValue
    één
    Kerbal.M
    Δv

### Expressions
An expression is a calculation that uses, numbers, operators, brackets, variables, lists and function calls to yield some value. 

#### Numbers
The simplest expression would be a single number:

    1

Which yields the value 1. Numbers can use a `.` as decimal separator:

    3.1415

When a number is smaller than 1, the initial zero can be dropped:

    0.1415
    .1415

Numbers can be negative:

    -3.1415

And finally, numbers can be written in scientific notation using either an uppercase or lowercase E. Some examples:

    3.14E10
    3.14e10
    .14E10
    -3.14E10
    -3.14E-10

#### Operators
An operator performs a calculation on one or more numbers.

Operators that operate on one number are called unary operators. They operate on the number that follows them. The unary operators available to Kerbulator are:

Operator | Description                | Precidence
---------|----------------------------|-----------
`-a`     | Negate `a`                 | 6
`√a`     | Take the square root of `a`| 6
`!a`     | 1 if `a` is zero, else 0   | 6
`¬a`     | 1 if `a` is zero, else 0   | 6

Operators that operate on two numbers are called binary operators. They operate on the number to the left and the number to the right of the operator. 
The binary operators available to Kerbulator are:

Operator | Description                                     | Precidence
---------|-------------------------------------------------|-----------
`a + b`  | Add `b` to `a`                                  | 4
`a - b`  | Substract `b` from `a`                          | 4
`a / b`  | Divide `a` by `b`                               | 5
`a ÷ b`  | Divide `a` by `b`                               | 5
`a * b`  | Multiply `a` by `b`                             | 5
`a × b`  | Multiply `a` by `b`                             | 5
`a · b`  | Multiply `a` by `b`                             | 5
`a ^ b`  | Raise `a` to the power of `b`                   | 6
`a √ b`  | Raise `b` to the power of `1/a `                | 5
`a % b`  | Calculate the remainder of `a` divided by `b`   | 5
`a == b` | 1 if `a` equals `b`, else 0                     | 3
`a != b` | 1 if `a` does not equal `b`, else 0             | 3
`a ≠ b`  | 1 if `a` does not equal `b`, else 0             | 3
`a and b`| 1 if `a` and `b` are both nonzero, else 0       | 2
`a ∧ b`  | 1 if `a` and `b` are both nonzero, else 0       | 2
`a or b` | 1 if `a` or `b` is nonzero (or both are), else 0| 2
`a ∨ b`  | 1 if `a` or `b` is nonzero (or both are), else 0| 2

The following comparison operators are a special case:

Operator | Description                                     | Precidence
---------|-------------------------------------------------|-----------
`a > b`  | 1 if `a` is greater than `b`, else 0            | 3
`a < b`  | 1 if `a` is less than `b`, else 0               | 3
`a >= b` | 1 if `a` is greater than or equal to `b`, else 0| 3
`a ≥ b`  | 1 if `a` is greater than or equal to `b`, else 0| 3
`a <= b` | 1 if `a` is less than or equal to `b`, else 0   | 3
`a ≤ b`  | 1 if `a` is less than or equal to `b`, else 0   | 3

these operators can be chained to form expressions such as `0 ≤ x < 1`, which will result in `1` if `x` is between 0 (inclusive) and 1 (exclusive). The length of these chains can be arbitrary, for example, `0 < 1 < 2 < 3 < 4` will result in `1`.

#### Variables
A variable is a container that holds either a number or a list. A statement assigns the value yielded by an expression to a variable. Once this is done, future expressions can use this variable. Variables are denoted with an identifier (a name). For example:

    a = 5 # statement that assigns 5 to 'a'
    b = a + 5 # 'a' can now be used in expressions

#### Brackets
Brackets are used to denote a sub-expression. First, the expression within the brackets will be executed and anything between the brackets will then by replaced by the value yielded by this sub-expression. For example:

    1 + (2-1)           # = 2
    (1+1) * (1+1)       # = 4
    1 + {(1+1) * (1+1)} # = 5

There are several types of brackets:

    (...) # use the value of the sub-expression
    {...} # same as (...)
    [...] # denotes a list
    ⌊...⌋ # use the value of the sub-expression rounded down
    ⌈...⌉ # use the value of the sub-expression rounded up
    |...| # use the absolute value of the sub-expression
 
#### Lists
A list is an ordered set of one or more numbers. It takes the form of `[expression, ..., expression]`. For example:

    [1,2,3]         # A list of three elements 1,2 and 3
    [1+1, 2+2, 3+3] # A list of three elements, 2, 4 and 6
    [a,b]           # A list containing the values of 'a' and 'b'
    [1]             # A list containing only one value

A list may not be empty (contain zero elements).

A list can be assigned to a variable by using a statement:

    a = [1,2,3]     # Assigns a list to 'a'

A list can be operated on by operators, in which case they are applied element-wise. For example:

    [1,2,3] + [1,2,3] # = [2,4,6]
    [1,2,3] * [1,2,3] # = [1,2,9]
    [a,b,c] - [d,e,f] # = [a-d, b-e, c-f]
    -[1,2,3]          # = [-1,-2,-3]
    ⌊[1.1, 2.1, 3.1]⌋ # = [1,2,3]
    5 * [1,2,3]       # = [5,10,15]
    [1,2,3] ≥ [0,2,4] # = [1, 1, 0]
    [1,2,3] ≥ 2       # = [0, 1, 1]

An exception are the `|...|` brackets. They treat the list as a vector and calculate the length:

    |[2,2]|   # = sqrt(2^2 + 2^2) = 2.828427...

Elements of a list can be numbers and/or lists:

    [[1,2,3], [4,5,6]]  # A list containing two lists
    [1, [4,5,6]]        # A list containing a number and a list

To access the individual elements of a list, you must use the list unpacking feature. A statement can assign the elements of a list to separate variables:

    d = [1,2,3]
    a,b,c = d           # a=1, b=2, c=3
    d = [a+1, b+1, c+1] # d = [2,3,4]

Matrices can be formed by using a list of lists:

    A = [[1,2,3], [4,5,6], [7,8,9]]

Matrix multiplication is implemented by the buildin `dot` function.

#### Function calls

An expression can call a function and use the output of this function for further computation. A function call is performed by simply denoting the name of the function:

    1 + someFunction # Executes someFunction and adds 1

To call a function with one input argument, the argument simply follows the function name:

    someFunction 2  # Execute someFunction with 2 as input

More than one input can be specified by using the form `(expression, ..., expression)`. For example:

    someFunction(1,2,3) # Execute someFunction with 1,2 and 3 as inputs
    someFunction(1+1,2+2,3+3) # Execute someFunction with 2,4 and 6 as inputs

The following function calls are identical:

    someFunction
    someFunction()
    someFunction ()

And so are these:

    someFunction 1
    someFunction(1)
    someFunction (1)
    
#### Creating maneuver nodes
To create a maneuver nodes with Kerbulator the `maneuver` keyword is used, it specifies that a variable should be used to create a maneuver node. The maneuver output specification is usually of the following form:

`maneuver: identifier`

Maneuvers need to be declared at the top of the function, in a similar fashion as `in:` and `out:` declarations. Maneuvers may also be given a prefix, postfix and description, although they are currently not used, for example:

 `maneuver: identifier "postfix" "Short description"`

Variables indicated by the `maneuver:` declaration are required to be lists with 4 elements. These four elements denote `[Δv_p, Δv_n, Δv_r, Δt]`:

Value  | Description
-------|----------
`Δv_p` | Change in velocity in the prograde direction (straight ahead)
`Δv_n` | Change in velocity in the normal direction (up)
`Δv_r` | Change in velocity in the radial direction (away from the planet)
`Δt`   | Time at which to perform the burn (where 0 means right now)

Note that variables marked as `maneuver` are not function outputs. They are only used to create maneuver nodes and are otherwise inaccessible outside of the function.


#### Setting alarms (KAC)
For this to work the mod Kerbal Alarm Clock (KAC) has to be installed.

Similarly to creating maneuver nodes there is a keyword to specify alarm outputs. For this the `alarm` keyword is used instead.
`alarm: identifier`

Alarm outputs are numbers sepcifying the universal time counting up from the start of the game. If a relative time is preferred the global value `UT` can come in handy.

`someAlarm = UT + Δt`

#### Build-in functions
Apart from the functions you write yourself, Kerbulator supplies the following build-in functions:

Name             | Description
-----------------|------------
`abs(x)`         | Absolute value of `x`
`acos(x)`        | Arccosine, or cos^(-1) (in degrees)
`acos_rad(x)`    | Arccosine, or cos^(-1) (in radians)
`asin(x)`        | Arcsine, or sin^(-1) (in degrees)
`asin_rad(x)`    | Arcsine, or sin^(-1) (in radians)
`atan(x)`        | Arctangent, or tan^(-1) (in degrees)
`atan_rad(x)`    | Arctangent, or tan^(-1) (in radians)
`atan2(y,x)`     | Arctangent with two arguments
`atan2_rad(y,x)` | Arctangent with two arguments (in radians)
`ceil(x)`        | Round up to the nearest integer
`cos(x)`         | Cosine (`x` in degrees)
`cos_rad(x)`     | Cosine (`x` in radians)
`cosh(x)`        | Hyperbolic cosine (`x` in degrees)
`cosh_rad(x)`    | Hyperbolic cosine (`x` in radians)
`exp(x)`         | `e` to the power of `x`
`floor(x)`       | Round down to the nearest integer
`ln(x)`          | Natural logarithm
`log(x)`         | Same as `ln`
`log10(x)`       | Base 10 logarithm
`max(a,b)`       | `a` if `a >= b` otherwise `b`
`min(a,b)`       | `a` if `a <= b` otherwise `b`
`pow(a,b)`       | `a` to the power of `b`
`rand()`         | Generate a random number between 0 and 1
`round(a,b)`     | Round `a` to `b` decimal places
`sign(x)`        | `-1` if `a < 0` otherwise 1
`sin(x)`         | Sine (`x` in degrees)
`sin_rad(x)`     | Sine (`x` in radians)
`sinh(x)`        | Hyperbolic sine (`x` in degrees)
`sinh_rad(x)`    | Hyperbolic sine (`x` in radians)
`sqrt(x)`        | Square root
`tan(x)`         | Tangent (`x` in degrees)
`tan_rad(x)`     | Tangent (`x` in radians)
`tanh(x)`        | Hyperbolic tangent (`x` in degrees)
`tanh_rad(x)`    | Hyperbolic tangent (`x` in radians)
`len(x)`         | Number of elements in list `x`
`mag(x)`         | Magnitude of vector `x`
`norm(x)`        | Version of vector `x` that has a magnitude of 1
`dot(a,b)`       | Dot product between list/matrix `a` and list/matrix `b`
`cross(a,b)`     | Cross product between list `a` and `b` (only supports vectors with 3 elements)
`any(x)`         | `1` if any of the elements of `x` is nonzero, else `0`
`all(x)`         | `1` if all of the elements of `x` are nonzero, else `0`

#### Piecewise functions (a.k.a. if-statements or branching statements)

Piecewise functions can be specified by using the following language construct:

    var ={ expression, if condition
           expression, if condition
           expression, if condition
           ...
           expression, otherwise

In the above construct, all the conditions are evaluated one by one. A condition is an expression that yields either a zero (=false) or nonzero (=true) value. If the condition is true, then the value yielded by the corresponding expression is assigned to the variable. If none of the conditions are true, the value yielded by the expression corresponding to the `otherwise` statement is assigned. This construct must always have at least one `if` statement and must have exactly one `otherwise` statement that must appear at the very end. 

For example:

    y ={ (x^2-x) / x, if x ≥ 1 or x < 10
                   0, otherwise

Take a look at the list of operators above for the different logical operators you can use to construct expressions to use as condition and take note of the `any()` and `all()` buildin functions that operate on lists.

#### Using the solver 

For values that cannot be directly computed, Kerbulator comes with a build-in implementation of the Nelder-Mead algorithm for numerical approximation. The algorithm takes as input a list of variables and an expression using those variables. By evaluating the expression many times with different values for the variables, the algorithm tries to minimize the result yielded by the expression (taken as the absolute value, so as close to 0 as possible).

It can be invoked by the following language construct:

    var1, var2, ... : expression

For example, to solve the equation `x + 5 = 10` for `x`, one could write:

    x: x + 5 - 10

Kerbulator also supports the following syntax with might look better in your code:

    var1, var2, ... : expression1 = expression2

which is translated internally to:

    var1, var2, ... : expression1 - expression2

so the example becomes:

    x: x + 5 = 10

Another example that solves for multiple variables would be:

    x,y: x + y - x * y

or equivilently:

    x,y: x + y = x * y

The Nelder-Mead algorithm will be much faster if you supply starting values for the variables you wish to solve for. Kerbulator will take the current value of the variables (if any) as starting values. For example:

    x = 4.5
    x: x + 5 = 10

will initiate `x` to 4.5 and then use numerical approximation to fine-tune it to 5.
